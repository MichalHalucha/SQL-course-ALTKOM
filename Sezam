use Sezam;
go
-- komentarz jednoliniowy 


/*
select 
Imie,Nazwisko

from tblPracownicy;

select 
NazwaTowaru,CenaZadana
from tblTowary
order by NazwaTowaru asc;

select 
NazwaTowaru,CenaZadana
from tblTowary
order by CenaZadana desc;


USE [Sezam]
GO

SELECT [KodKlienta]
      ,[NazwaFirmy]
      ,[NIP]
      ,[Telefon]
      ,[TelefonKomorkowy]
      ,[Ulica]
      ,[Kod]
      ,[Miasto]
      ,[Aktywny]
  FROM [dbo].[tblKlienci]
GO


select 
NazwaFirmy, Miasto
from tblKlienci
where Miasto='Warszawa' or Miasto='Zielonka';


select 
NazwaFirmy, Miasto
from tblKlienci
where Miasto in ('warszawa','zielonka');


select 
NazwaFirmy, Miasto
from tblKlienci
where Miasto in (select Miasto
					from tblPracownicy);

select 
Imie,Nazwisko
from tblPracownicy
where Nazwisko like 'K%';


select 
Imie,Nazwisko
from tblPracownicy
where Nazwisko like '_o%';
-- znajdowanie  wyrażeń gdzie druga literka jest literką o 

select 
Imie,Nazwisko
from tblPracownicy
where Nazwisko like '[bfk]_[w]%';
-- wyszukanie nazwisk gdzie zaczynają się od bfk później obojetnie jaka i później litera w

select 
Imie,Nazwisko
from tblPracownicy
where Nazwisko like '[a-c]%';
-- wyświetlenie z zakresu a-c 

select 
Imie,Nazwisko
from tblPracownicy
where Nazwisko like '[^bfk]%';
-- negowanie wyszukiwania

select 
Imie,Nazwisko
from tblPracownicy
where Nazwisko like '__[_]%';
-- przewiltrowanie wyników ze znakiem ucieczki na 3 miejscu 

like '__!_%' escape '!'
*/

select 
Imie
from tblPracownicy
where Imie like '%a';

--żeńskie imionana litere tb pracownicy kobiety

select
	name, description
from sys.fn_helpcollations()
where name like '%polish%'

select 
Imie,Nazwisko
from tblPracownicy
where Nazwisko='Fuller';

select 
Imie,Nazwisko
from tblPracownicy
where Nazwisko collate Polish_CS_AS='fuller';
-- uwzględniamy wielkość liter 

select Imie, Nazwisko
from tblPracownicy
order by Nazwisko collate POLISH_BIN;

select 
NazwaTowaru, CenaZadana
from tblTowary
where CenaZadana >= 5 and CenaZadana <= 10
-- zamkniety przedzial od 5-10

select CenaZadana
from tblTowary
where CenaZadana between 5 and 10;


select NazwaFirmy,TelefonKomorkowy
from tblKlienci
where TelefonKomorkowy is null;


select GETDATE() as [Data bieżąca];
-- piszemy nazwe w nawiasie kwadratowym bo mamy spacje. jeżeli było by bez spacji to bez kwadratowego

/* 'rrrr-mm-dd'
'rrrrmmdd' - uniwersalny zapis 
*/

select
NrSprzedazy,DataSprzedazy
from tblSprzedaz
where DataSprzedazy between '19980115' and '19980215';

select GETDATE() as [Data bieżąca]
,CONVERT(varchar,GETDATE(),102) as [Data];

select DataSprzedazy
	, DATEPART(YYYY,DataSprzedazy) as Rok
	, DATEPART(Q,DataSprzedazy) as kwartal
	, DATEPART(M,DataSprzedazy) as mesiac
	, DATENAME(M,DataSprzedazy) as [Nazwa Miesiąca]
	, DATEPART(WW,DataSprzedazy) as tydzien
	, DATEPART(Y,DataSprzedazy) as [Dzień roku]
	, DATEPART(D,DataSprzedazy) as [Dzień miesiąca]
	, DATEPART(W,DataSprzedazy) as [Dzień tygodnia]
	, DATENAME(w,DataSprzedazy) as [NazwaDniaTygodnia]
from tblSprzedaz

set language 'Polish'
set language 'English'

select Imie + ' ' + Nazwisko as Pracownik
from tblPracownicy

select 'Dzisiejsza data to: ' + CONVERT(varchar,GETDATE(),102) as [Moja data komunikat];

select 'Dzisiejsza data to: ' + CAST(GETDATE() as varchar) as [Moja data komunikat];


-- imie i nazwisko pracowników 
-- case ma uzupełniż o zwrot grzecznosciowy 

select
	case 
	when Imie like '%a' then 'Pani '
	else 'Pan '
	end + Imie +' '+ Nazwisko as Pracownik
from tblPracownicy

--operatory pracujące na zbiorach 

select distinct miasto 
from tblKlienci

select miasto 
from tblKlienci
union all
-- union czyli suma logiczna jak dodajemy all to łączy dwie i są wszystkie wartości
select miasto 
from tblPracownicy
-- kolejność zapytań nie ma znaczenia

select miasto 
from tblKlienci
intersect
-- intersect częśc wspólna
select miasto 
from tblPracownicy

select miasto 
from tblKlienci
except
-- różnice w tabelach
select miasto 
from tblPracownicy
-- kolejność wykonywania ma znaczenie i inny zbiór danych się dostaje 

-- przy łączeniu tabel trzeba mieć tyle samo argumentów
select Miasto, NazwaFirmy, null as Nazwiska
from tblKlienci
union
select miasto,null, Nazwisko
from tblPracownicy

--funkcje tekstowe 
select  ltrim(NazwaTowaru) as Towar, CenaZadana
from tblTowary
order by Towar asc;
-- usuwanie spacji z lewej

select  upper(NazwaTowaru) as Towar, CenaZadana
from tblTowary
order by Towar asc;
-- zamiana na duże

select  left(upper(NazwaTowaru),4) as Towar, CenaZadana
from tblTowary
-- pokazywanie 4 znaków z lewej

select  right(upper(NazwaTowaru),4) as Towar, CenaZadana
from tblTowary
-- pokazywanie 4 znaków z prawej
order by Towar asc;

select  substring(NazwaTowaru,2,4) as Towar, CenaZadana
from tblTowary
-- środkowe litery 

select  len(NazwaTowaru) as Towar, CenaZadana
from tblTowary
-- długość wyrazu

-- wyświetlić w jednej kolumie imie i nazwisko, żeby w przypadku nazwiska 1 litera dużą pozostałe małymi i jeżeli są spacej na poczatku i nakoncu to spacje usunąć
--kolumna ma się nazywać pracownik

select 
Imie + ' '+  SUBSTRING((ltrim(upper(Nazwisko))),1,1) + SUBSTRING((ltrim(lower(Nazwisko))),2,len(Nazwisko))
from tblPracownicy



select 
Imie,Nazwisko
from tblPracownicy
where Nazwisko like '_o%';

--funkcje agregujące, group by, inner join
-- 01 cała kasa

select cast(sum(Ilosc*CenaSprzedazy) as money) as CalaKasa
from tblOpisSprzedazy;

--02 ranking towarów
-- join zbiór rekordów dwóch tabel odpowiadajacych wartośći
select ltrim(NazwaTowaru) as Towar
	,cast(sum(Ilosc*CenaSprzedazy) as money) as Wartosc
from tblOpisSprzedazy as o 
	inner join tblTowary as T
		on o.KodTowaru = T.KodTowaru
group by NazwaTowaru
order by Wartosc desc


-- ranking faktur
select NrSprzedazy,
	cast(sum(Ilosc*CenaSprzedazy) as money) as Wartosc
from tblOpisSprzedazy
group by NrSprzedazy 
order by Wartosc desc;

-- ranking towarów z udziałem procentowym:
select ltrim(NazwaTowaru) as Towar
	,cast(sum(Ilosc*CenaSprzedazy) as money) as Wartosc
	,cast(sum(Ilosc*CenaSprzedazy) as money) / 
	(select cast(sum(Ilosc*CenaSprzedazy) as money) from tblOpisSprzedazy) * 100 as UdzialProcentowy
from tblOpisSprzedazy as o 
	inner join tblTowary as T
		on o.KodTowaru = T.KodTowaru
group by NazwaTowaru
order by Wartosc desc

-- CTE

/*
1: CTE oparte na jednym zbiorze danych

with nazwa CTE
as 
(
select .. bez order by, z nazwami kolumn
)
select wynikowy 
from można odwołać się do nazwy CTE jak do istniejącej tabeli

2: CTE oparte na dwóch zbiorach 
*/

/*
________________________________________________________________
1: CTE oparte na jednym zbiorze danych

with nazwa CTE1
as 
(
select .. bez order by, z nazwami kolumn
), 
nazwa CTE2 
as
(
select .. bez order by, z nazwami kolumn
)
select wynikowy 
from można odwołać się do nazwy CTE1 i CTE2 jak do istniejącej tabeli
i połączyć from cte1 inner join cte2
*/

-- technika optymalizowana przez serwer, lepiej tak pisać kod. Jeżeli mamy dużą liczbę rekordów zwłaszcza 
with CTE1 as
(
select 
	cast(sum(Ilosc*CenaSprzedazy) as money) as CałaKasa
	from tblOpisSprzedazy
)
select 
	ltrim(NazwaTowaru) as Towar
		,cast(sum(Ilosc*CenaSprzedazy) as money) as Wartość
		,cast(sum(Ilosc*CenaSprzedazy) as money)/CałaKasa *100 as UdziałProc
	from tblOpisSprzedazy as o 
	inner join tblTowary as T
		on o.KodTowaru = T.KodTowaru
	cross join CTE1
	-- połączenie rekordu każdego z każdym
group by NazwaTowaru,CałaKasa
order by Wartość desc;

--dynamika kwartalna - rok kwartał wartość
SELECT YEAR(DataSprzedazy) as ROK
	,DATEPART(q,DataSprzedazy) as kwartal
	,cast(sum(Ilosc*CenaSprzedazy) as money) as wartość 
FROM tblSprzedaz 
	INNER JOIN tblOpisSprzedazy 
		ON tblSprzedaz.NrSprzedazy = tblOpisSprzedazy.NrSprzedazy
group by YEAR(DataSprzedazy), DATEPART(q,DataSprzedazy)
order by ROK,kwartal;

-- dzień drugi

select top(10) LTRIM(NazwaTowaru) as Towar
	,CAST(sum(Ilosc*CenaSprzedazy)as money) as Wartosc
from tblOpisSprzedazy as O
	inner join tblTowary as T
		on O.KodTowaru=T.KodTowaru
group by NazwaTowaru
order by Wartosc desc;

-- zró w taki sposob żeby dostać 10 najgorszych towarów

select top(10) LTRIM(NazwaTowaru) as Towar
	,CAST(sum(Ilosc*CenaSprzedazy)as money) as Wartosc
from tblOpisSprzedazy as O
	inner join tblTowary as T
		on O.KodTowaru=T.KodTowaru
group by NazwaTowaru
order by Wartosc asc;

-- czasami jak mamy liste z ta sama iloscia rekordow 
-- trzy najliczniej reprezentowane miasta

select Miasto
	,COUNT(*) as LiczbaKlientów
from tblKlienci
group by Miasto
order by LiczbaKlientów desc
-- w tym przypadku mamy egzekwo miasta i trzeba wziac to pod uwage

select top(3) with ties Miasto
	,COUNT(*) as LiczbaKlientów
from tblKlienci
group by Miasto
order by LiczbaKlientów desc

-- wyświetlenie top 3 razem z miastami egzekwo

--\/ wyświetlenie procentowe najlepszych towarów
select top(20) percent LTRIM(NazwaTowaru) as Towar
	,CAST(sum(Ilosc*CenaSprzedazy)as money) as Wartosc
from tblOpisSprzedazy as O
	inner join tblTowary as T
		on O.KodTowaru=T.KodTowaru
group by NazwaTowaru
-- jeżeli mamy losowe towary to kończemy na group by
order by Wartosc desc;

-- pomin 10 pierwszych i wyswielt 10 kolejnych

-- offset fetch filt dotyczący SQL dostepny w każdym systemie i ten filtr zapisujemy po order by  
select LTRIM(NazwaTowaru) as Towar
	,CAST(sum(Ilosc*CenaSprzedazy)as money) as Wartosc
from tblOpisSprzedazy as O
	inner join tblTowary as T
		on O.KodTowaru=T.KodTowaru
group by NazwaTowaru
order by Wartosc desc
--offset 10 rows fetch next 10 rows only -- od 10 do 20
--offset 0 rows fetch next 10 rows only -- 10 pierwszych wierszy 
offset 2 rows;

-- imie nazwisko w jednej kolumie, wartość sprzedaży
SELECT 
	Imie + ' '+  SUBSTRING((ltrim(upper(Nazwisko))),1,1) + SUBSTRING((ltrim(lower(Nazwisko))) ,2,len(Nazwisko)),
	cast(sum(Ilosc*CenaSprzedazy) as money) as Cena       
FROM tblOpisSprzedazy 
	INNER JOIN tblSprzedaz 
		ON tblOpisSprzedazy.NrSprzedazy = tblSprzedaz.NrSprzedazy 
			INNER JOIN tblPracownicy 
				ON tblSprzedaz.IDPracownika = tblPracownicy.IDPracownika
group by Imie,Nazwisko
order by Cena

-- wzorzec select
SELECT 
	Imie + ' '+  SUBSTRING((ltrim(upper(Nazwisko))),1,1) + SUBSTRING((ltrim(lower(Nazwisko))) ,2,len(Nazwisko)),
	cast(sum(Ilosc*CenaSprzedazy) as money) as Cena
	,cast(sum(Ilosc*CenaSprzedazy) as money) -3000 as PodstawaPremii
	,YEAR(DataSprzedazy) as Rok
	,DATEPART(q,DataSprzedazy) as Kwartal
FROM tblOpisSprzedazy 
	INNER JOIN tblSprzedaz 
		ON tblOpisSprzedazy.NrSprzedazy = tblSprzedaz.NrSprzedazy 
			INNER JOIN tblPracownicy 
				ON tblSprzedaz.IDPracownika = tblPracownicy.IDPracownika
where YEAR(DataSprzedazy) = 1998 and 
	DATEPART(q,DataSprzedazy) = 1
group by Imie,Nazwisko, YEAR(DataSprzedazy),DATEPART(q,DataSprzedazy)
having sum(Ilosc*CenaSprzedazy) < 3000 
order by Cena desc;

-- podranking pracowników w obrebie kategorii towarow 
-- nabiał i najlepsze wartości
-- nazwa kategorii imie nazwisko i wartosc sprzedazy
SELECT 
	Imie + ' '+  SUBSTRING((ltrim(upper(Nazwisko))),1,1) + SUBSTRING((ltrim(lower(Nazwisko))) ,2,len(Nazwisko)),Ilosc,CenaSprzedazy,NazwaKategorii
	,cast (sum(Ilosc*CenaSprzedazy) as money) as wartosc, NazwaKategorii

FROM tblSprzedaz 
	INNER JOIN tblKlienci 
		ON tblSprzedaz.KodKlienta = tblKlienci.KodKlienta 
	INNER JOIN tblPracownicy
	    ON tblSprzedaz.IDPracownika = tblPracownicy.IDPracownika 
	INNER JOIN tblOpisSprzedazy
		ON tblSprzedaz.NrSprzedazy = tblOpisSprzedazy.NrSprzedazy 
	INNER JOIN tblTowary 
		ON tblOpisSprzedazy.KodTowaru = tblTowary.KodTowaru 
	INNER JOIN tblKategorie 
		ON tblTowary.Kategoria = tblKategorie.Kategoria
group by NazwaKategorii,Imie,Nazwisko,Ilosc,CenaSprzedazy
order by wartosc desc;



--top filtr procentowy -- T-SQL
-- pominiecia rekordów  offset fetch - standardowy

-- select 
-- funkcje agregujące
-- zapytania CTE
-- union dwie bazy danych trzy babele

-- DAY3
-- Obiekty zapisane na serwerze
-- widoki i procedury składowane
-- widoki, zapisane na serwrze zapytania, (widoczne), nazwy musza byc unikatowe, zapytania musza zwracac zbiory rekordów bez order by!


SELECT 
	NazwaFirmy
	, cast(sum(Ilosc*CenaSprzedazy) as money) as wartosc
FROM tblKlienci
	INNER JOIN tblSprzedaz 
		ON tblKlienci.KodKlienta = tblSprzedaz.KodKlienta 
	INNER JOIN tblOpisSprzedazy 
		ON tblSprzedaz.NrSprzedazy = tblOpisSprzedazy.NrSprzedazy
group by NazwaFirmy
order by wartosc desc;

-- przekształćenie zapytania w widok

go
create view vRankingFirm
as 
SELECT 
	NazwaFirmy
	, cast(sum(Ilosc*CenaSprzedazy) as money) as wartosc
FROM tblKlienci
	INNER JOIN tblSprzedaz 
		ON tblKlienci.KodKlienta = tblSprzedaz.KodKlienta 
	INNER JOIN tblOpisSprzedazy 
		ON tblSprzedaz.NrSprzedazy = tblOpisSprzedazy.NrSprzedazy
group by NazwaFirmy
go

select NazwaFirmy
	,wartosc
from vRankingFirm
where wartosc>1500
order by wartosc desc;

-- sortowanie widoku 
go
create view vTop_10_RankingFirm
as 
SELECT top(10)
-- top(99,999) percent
	NazwaFirmy
	, cast(sum(Ilosc*CenaSprzedazy) as money) as wartosc
FROM tblKlienci
	INNER JOIN tblSprzedaz 
		ON tblKlienci.KodKlienta = tblSprzedaz.KodKlienta 
	INNER JOIN tblOpisSprzedazy 
		ON tblSprzedaz.NrSprzedazy = tblOpisSprzedazy.NrSprzedazy
group by NazwaFirmy
order by wartosc desc;
go

select * 
from vTop_10_RankingFirm

go
create view SlownikMiast
as
	select miasto
	from HM.dbo.tbKlienci
	union
	select miasto 
	from sezam.dbo.tblKlienci
	union

	-- union robi w gratisie distingt  
	select miasto
	from Sezam.dbo.tblPracownicy
go

select miasto
from SlownikMiast
where miasto like '[k-z]%'

-- duży widok dla analityków
go
-- jeżeli trzeba nadpisać tabele to trzeba wykonać alter
create view vDlaTP
as
SELECT 
	Imie + ' '+  SUBSTRING((ltrim(upper(Nazwisko))),1,1) + SUBSTRING((ltrim(lower(Nazwisko))),2,len(Nazwisko)) as Nazwa
	,NazwaFirmy
	,Stanowisko
	,tblSprzedaz.NrSprzedazy as NrFaktury
	,cast(DataSprzedazy as date) as Data
	,YEAR(DataSprzedazy) as Rok
	,DATEPART(q,DataSprzedazy) as Kwartal
	,MONTH(DataSprzedazy) as miesiac
	,DATEPART(w,DataSprzedazy) as DzienTygodnia
	,DATENAME(m,DataSprzedazy) as NazwaMiesiaca
	,DATENAME(w,DataSprzedazy) as NazwaDniaMiesiaca
	,Ilosc
	,cast(Ilosc*CenaSprzedazy as money) as Wartosc  
	,cast(Ilosc*Cena as money) as Koszt
	,cast(Ilosc*(CenaSprzedazy-Cena)as money) as Zysk
	,LTRIM(NazwaTowaru) as Towar
	,NazwaKategorii
FROM tblSprzedaz 
INNER JOIN tblKlienci
 ON tblSprzedaz.KodKlienta = tblKlienci.KodKlienta 
INNER JOIN tblOpisSprzedazy
 ON tblSprzedaz.NrSprzedazy = tblOpisSprzedazy.NrSprzedazy
INNER JOIN tblPracownicy
 ON tblSprzedaz.IDPracownika = tblPracownicy.IDPracownika 
INNER JOIN tblTowary 
 ON tblOpisSprzedazy.KodTowaru = tblTowary.KodTowaru 
INNER JOIN tblKategorie 
 ON tblTowary.Kategoria = tblKategorie.Kategoria
 go

select Rok,kwartal,Towar,sum(Zysk) as ZyskKwartalny
from vDlaTP
where Rok=1998 and Kwartal=1
group by Rok,Kwartal,Towar
order by Rok,Kwartal

-- widoki wykorzystujemy głównie dla bezpieczeństwa możemy się później do nich odwoływać jak do tabel

-- procedury skłądowane  -- zapisywane sa na serwerze -- muszą mieć aliasy

go
create procedure pPremia_ROK_Kwartal_KwotaMinimalna
@Rok as int, @Kwartal as int, @ObrotMin as money
as 
	SELECT 
		Imie + ' '+  SUBSTRING((ltrim(upper(Nazwisko))),1,1) + SUBSTRING((ltrim(lower(Nazwisko))) ,2,len(Nazwisko)) as Nazwa
		,cast(sum(Ilosc*CenaSprzedazy) as money) as Cena
		,cast(sum(Ilosc*CenaSprzedazy) as money) -@ObrotMin as PodstawaPremii
		,YEAR(DataSprzedazy) as Rok
		,DATEPART(q,DataSprzedazy) as Kwartal
	FROM tblOpisSprzedazy 
		INNER JOIN tblSprzedaz 
			ON tblOpisSprzedazy.NrSprzedazy = tblSprzedaz.NrSprzedazy 
				INNER JOIN tblPracownicy 
					ON tblSprzedaz.IDPracownika = tblPracownicy.IDPracownika
	where YEAR(DataSprzedazy) = @Rok and 
		DATEPART(q,DataSprzedazy) = @Kwartal
	group by Imie,Nazwisko, YEAR(DataSprzedazy),DATEPART(q,DataSprzedazy)
	having sum(Ilosc*CenaSprzedazy) < @ObrotMin 
	order by Cena desc;	
go

-- chce skorzystać z procedury
exec pPremia_ROK_Kwartal_KwotaMinimalna 1999,1,900;


-- lista ładnych nazw towarów z przedziału cen
go
create procedure pCenaOdCenaDo
@CenaOd as money,@CenaDo as money
as
select
ltrim(NazwaTowaru) as Towar,CenaZadana
from tblTowary
where CenaZadana between @CenaOd and @CenaDo
order by CenaZadana
go

exec pCenaOdCenaDo 10,100

-- stworzenie nowych klientow na podstawie tabeli klienci 
-- select into czyli tworzenie nowej tabeli i jej wykorzystanie

go 
create procedure pKopiujTabeleKlienci
as
begin 
	if OBJECT_ID('tblNowiKlienci','U') is not null
		drop table tblNowiKlienci

-- w nowej tabeli pole kod klienta nazywało się kod klienta 2, nadajemy alias

SELECT [KodKlienta] as [KodKlienta2]
      ,[NazwaFirmy]
      ,[NIP]
      ,[Telefon]
      ,[TelefonKomorkowy]
      ,[Ulica]
      +' '+[Kod]
      +' '+[Miasto] as Adres
      ,[Aktywny]
  Into [dbo].[tblNowiKlienci]
  FROM [dbo].[tblKlienci]
  where NazwaFirmy like '[a-g]%'
end
GO

exec pKopiujTabeleKlienci
select * from tblNowiKlienci


-- sprawdzimy jakie mamy ceny, dla tej kategorii zmienimy ceny i wystietmy- 
--procedura do zmiany cen

go 
alter procedure pZmianaCen_Kategoria_Zmian
@Kategoria as int,@Zmian as float
as 
--
select ltrim(NazwaTowaru) as Towar
,Kategoria
,CenaZadana
from tblTowary
where Kategoria=@Kategoria
--
update tblTowary 
set CenaZadana=CenaZadana*@Zmian 
where Kategoria=@Kategoria
--
select ltrim(NazwaTowaru) as Towar
,Kategoria
,CenaZadana
from tblTowary
where Kategoria=@Kategoria
go

exec pZmianaCen_Kategoria_Zmian 2,1.05;

-- przekazywanie offsetu jako parametr i można wybierać stronnicowanie


if OBJECT_ID('pStronicowanieOffsetFetch','P') is not null
	drop procedure pStronicowanieOffsetFetch
go

create procedure pStronicowanieOffsetFetch
@NumerStrony as int,@RekordowNaStrone as int
as
if @NumerStrony>0 and @RekordowNaStrone>0
begin
	select ltrim(NazwaTowaru) as Towar
	,CenaZadana
	from tblTowary
	order by NazwaTowaru asc
	offset (@NumerStrony-1)*@RekordowNaStrone rows
	fetch next @RekordowNaStrone rows only
end
go

execute pStronicowanieOffsetFetch 1,7

-- poradnik pracowników w obrbie 
with cte1 as
(
	select cast(sum(Ilosc*CenaSprzedazy)  as money) as CalaWartosc  
	from tblOpisSprzedazy
),
cte2 as
(
	SELECT NazwaKategorii
		   ,cast(sum(Ilosc*CenaSprzedazy)  as money) as KategoriaWartosc    
	FROM tblOpisSprzedazy 
		INNER JOIN tblTowary 
			ON tblOpisSprzedazy.KodTowaru = tblTowary.KodTowaru 
		INNER JOIN tblKategorie 
			ON tblTowary.Kategoria = tblKategorie.Kategoria
	group by NazwaKategorii
)
SELECT tblKategorie.NazwaKategorii 
	,Imie
	+' '+ Upper(left(rtrim(ltrim(Nazwisko)),1))
	+lower(right(rtrim(ltrim(Nazwisko)),LEN(rtrim(ltrim(Nazwisko)))-1)) as Pracownik
	 ,cast(sum(Ilosc*CenaSprzedazy)  as money) as wartosc 
	 ,cast(sum(Ilosc*CenaSprzedazy)  as money)/CalaWartosc*100 as UdzialProcCalosc 
	 ,cast(sum(Ilosc*CenaSprzedazy)  as money)/KategoriaWartosc*100 as UdzialProcKategoria  
FROM  tblPracownicy 
	INNER JOIN tblSprzedaz 
		ON tblPracownicy.IDPracownika = tblSprzedaz.IDPracownika 
	INNER JOIN tblOpisSprzedazy 
		ON tblSprzedaz.NrSprzedazy = tblOpisSprzedazy.NrSprzedazy 
	INNER JOIN tblTowary 
		ON tblOpisSprzedazy.KodTowaru = tblTowary.KodTowaru 
	INNER JOIN tblKategorie 
		ON tblTowary.Kategoria = tblKategorie.Kategoria
	inner join cte2
		on cte2.NazwaKategorii=tblKategorie.NazwaKategorii
	cross join cte1
group by tblKategorie.NazwaKategorii, Imie, Nazwisko,CalaWartosc, KategoriaWartosc
order by NazwaKategorii, wartosc desc;

-- rekurencja (rekurencyjne odwołanie się) (do samej siebie). Z brakującymi latami i kwartałami
-- cte rekurencyjne


with cteLata 
as
(
	select 1998 as Rok
	union all
	--rekurencja
	select Rok + 1 from cteLata where Rok<2002
),
cteKwartaly
as
(
	select 1 as kwartal
	union all
	select Kwartal + 1 from cteKwartaly where kwartal<4 
),
cteKalendarz
as
(
	select Rok,kwartal
	from cteLata cross join cteKwartaly
),
cteDynamika
as
(
	SELECT 
	 YEAR(DataSprzedazy) as Rok
	,DATEPART(q,DataSprzedazy) as Kwartal
	,cast(sum(Ilosc*CenaSprzedazy) as money) as Wartosc     
	FROM tblOpisSprzedazy 
		INNER JOIN tblSprzedaz 
			ON tblOpisSprzedazy.NrSprzedazy = tblSprzedaz.NrSprzedazy
	group by YEAR(DataSprzedazy),DATEPART(q,DataSprzedazy)
)
--select wynikowy
	select cteKalendarz.Rok,cteKalendarz.kwartal,isnull(Wartosc,0) as WartoscKwartalu

	from cteKalendarz
	left outer join cteDynamika
		on cteKalendarz.Rok=cteDynamika.Rok 
		and 
		cteKalendarz.kwartal=cteDynamika.Kwartal
	
	order by cteKalendarz.Rok,cteKalendarz.kwartal\


 
